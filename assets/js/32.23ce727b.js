(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{525:function(t,s,a){"use strict";a.r(s);var e=a(6),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("JavaScript 属于动态类型（dynamically typed），变量不会在定义后被限制为某一数据类型。")]),t._v(" "),a("h2",{attrs:{id:"number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number"}},[t._v("#")]),t._v(" Number")]),t._v(" "),a("p",[t._v("表示整数和浮点数，包括 "),a("code",[t._v("Infinity")]),t._v(" 和 "),a("code",[t._v("NaN")]),t._v("。其中 "),a("code",[t._v("NaN")]),t._v(" 是粘性的，如果数学表达式中有一个 "),a("code",[t._v("NaN")]),t._v("，会被传播到最终结果。")]),t._v(" "),a("h2",{attrs:{id:"bigint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bigint"}},[t._v("#")]),t._v(" BigInt")]),t._v(" "),a("p",[t._v("JavaScript 的 Number 类型无法表示"),a("code",[t._v("-（2"),a("sup",[t._v("53")]),t._v("-1）")]),t._v("到"),a("code",[t._v("2"),a("sup",[t._v("53")]),t._v("-1")]),t._v("范围之外的值，BigInt 就是用来解决这个局限性。")]),t._v(" "),a("h2",{attrs:{id:"string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" String")]),t._v(" "),a("ol",[a("li",[t._v('"" 双引号')]),t._v(" "),a("li",[t._v("'' 单引号")]),t._v(" "),a("li",[t._v("`` 反引号")])]),t._v(" "),a("p",[a("code",[t._v("``")]),t._v("是"),a("strong",[t._v("功能扩展")]),t._v("，允许使用"),a("code",[t._v("${}")]),t._v("语法进行变量或表达式的拼接。It is useful at sometimes.")]),t._v(" "),a("h2",{attrs:{id:"boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#boolean"}},[t._v("#")]),t._v(" Boolean")]),t._v(" "),a("p",[t._v("只有两个值："),a("code",[t._v("true")]),t._v("和"),a("code",[t._v("false")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"null"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null"}},[t._v("#")]),t._v(" Null")]),t._v(" "),a("p",[t._v("只有一个值："),a("code",[t._v("null")]),t._v("。表示无、空或值未知的特殊值。"),a("strong",[t._v("并不表示\n对不存在的 "),a("code",[t._v("object")]),t._v(" 的引用或者 "),a("code",[t._v("null")]),t._v(" 指针。")])]),t._v(" "),a("h2",{attrs:{id:"undefined"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#undefined"}},[t._v("#")]),t._v(" Undefined")]),t._v(" "),a("p",[t._v("表示变量未被赋值。")]),t._v(" "),a("p",[t._v("声明一个变量但未被赋值，变量值就是"),a("code",[t._v("undefined")]),t._v("。注意区别"),a("code",[t._v("not defined")]),t._v("和"),a("code",[t._v("undefined")]),t._v("，前者是 error，后者是值。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// age not defined")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("可以显示将"),a("code",[t._v("undefined")]),t._v("赋值给变量，但并不推荐这样做。通常，使用 "),a("code",[t._v("null")]),t._v(" 将一个“空”或者“未知”的值写入变量中，而 "),a("code",[t._v("undefined")]),t._v(" 则保留作为未进行初始化的事物的默认初始值。")]),t._v(" "),a("h2",{attrs:{id:"object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object"}},[t._v("#")]),t._v(" Object")]),t._v(" "),a("p",[a("code",[t._v("object")]),t._v(" 类型是一个特殊的类型。")]),t._v(" "),a("p",[t._v("其他所有的数据类型都被称为“原始类型”，因为它们的值只包含一个单独的内容（字符串、数字或者其他）。相反，"),a("code",[t._v("object")]),t._v(" 则用于储存数据集合和更复杂的实体。")]),t._v(" "),a("h2",{attrs:{id:"symbol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol"}},[t._v("#")]),t._v(" Symbol")]),t._v(" "),a("h2",{attrs:{id:"typeof-运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typeof-运算符"}},[t._v("#")]),t._v(" typeof 运算符")]),t._v(" "),a("p",[t._v("介绍完 JavaScript 的数据类型，有必要学习下"),a("code",[t._v("typeof")]),t._v("运算符，它支持两种语法：")]),t._v(" "),a("ol",[a("li",[t._v("运算符："),a("code",[t._v("typeof x")])]),t._v(" "),a("li",[t._v("函数："),a("code",[t._v("typeof(x)")]),t._v("\n一些 🌰 ：")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "undefined"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "number"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "bigint"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "boolean"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "string"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "symbol"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "object"  (1)')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "object"  (2)')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" alert"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "function"  (3)')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br")])]),a("p",[t._v("对于最后 2 个结果有必要解释一下：")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("typeof null")]),t._v(' 的结果是 "object"。这是官方承认的 '),a("code",[t._v("typeof")]),t._v(" 的行为上的错误，这个问题来自于 JavaScript 语言的早期，并为了兼容性而保留了下来。"),a("code",[t._v("null")]),t._v(" 绝对不是一个 "),a("code",[t._v("object")]),t._v("。原因在于早期对"),a("code",[t._v("Object")]),t._v("对象的判断标准。")]),t._v(" "),a("li",[a("code",[t._v("typeof alert")]),t._v(' 的结果是 "function"，因为 '),a("code",[t._v("alert")]),t._v(" 在 JavaScript 语言中是一个函数。在 JavaScript 语言中没有一个特别的 “function” 类型。函数隶属于 "),a("code",[t._v("object")]),t._v(" 类型。但是 "),a("code",[t._v("typeof")]),t._v(' 会对函数区分对待，并返回 "function"。这也是来自于 JavaScript 语言早期的问题。从技术上讲，这种行为是不正确的，但在实际编程中却非常方便。')])])])}),[],!1,null,null,null);s.default=n.exports}}]);